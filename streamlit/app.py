import streamlit as st
import pandas as pd
import numpy as np
import tempfile
import os
import json
import requests
import geopandas as gpd
from shapely.geometry import Point
from minio import Minio
from utils.data_loader import load_data_from_minio, load_geojson_from_minio
from utils.model_loader import load_sklearn_model, predict_price_sklearn
from datetime import datetime

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction Immobili√®re",
    page_icon="üè†",
    layout="wide"
)

# Fonction pour obtenir les coordonn√©es GPS √† partir d'une adresse
def get_coordinates_from_address(address):
    """
    Utilise l'API de g√©ocodage pour obtenir les coordonn√©es GPS d'une adresse
    """
    # Utiliser l'API de g√©ocodage du gouvernement fran√ßais (API Adresse)
    base_url = "https://api-adresse.data.gouv.fr/search/"
    params = {
        "q": address,
        "limit": 1
    }

    try:
        response = requests.get(base_url, params=params)
        data = response.json()

        if data["features"]:
            feature = data["features"][0]
            coordinates = feature["geometry"]["coordinates"]
            properties = feature["properties"]

            return {
                "lat": coordinates[1],
                "lon": coordinates[0],
                "city": properties.get("city", ""),
                "postcode": properties.get("postcode", ""),
                "street": properties.get("name", "")
            }
        else:
            return None
    except Exception as e:
        st.error(f"Erreur lors de la g√©olocalisation: {e}")
        return None


# Fonction pour charger les contours IRIS
@st.cache_data
def load_iris_contours():
    """
    Charge les contours IRIS depuis MinIO
    """
    try:
        # Charger les contours IRIS depuis MinIO
        gdf = load_geojson_from_minio(
            bucket_name="raw-data",
            object_name="iris-contours/20250227/iris_contours.gpkg"
        )
        return gdf
    except Exception as e:
        st.error(f"Erreur lors du chargement des contours IRIS: {e}")
        # Cr√©er un GeoDataFrame vide en cas d'erreur
        return gpd.GeoDataFrame()


def get_iris_code_from_coordinates(lat, lon, iris_contours):
    """
    D√©termine le code IRIS correspondant aux coordonn√©es GPS
    """
    try:
        # V√©rifier si le GeoDataFrame est vide
        if iris_contours.empty:
            st.warning("Le fichier des contours IRIS est vide")
            return None

        # Cr√©er un point g√©ographique √† partir des coordonn√©es
        point = Point(lon, lat)

        # S'assurer que le syst√®me de coordonn√©es est en WGS84
        if iris_contours.crs is None:
            iris_contours.set_crs(epsg=4326, inplace=True)
        elif iris_contours.crs.to_epsg() != 4326:
            iris_contours = iris_contours.to_crs(epsg=4326)

        # Corriger les g√©om√©tries invalides si n√©cessaire
        if iris_contours.geometry.is_valid.sum() != len(iris_contours):
            iris_contours['geometry'] = iris_contours.geometry.buffer(0)

        # Trouver l'IRIS qui contient ce point - M√©thode optimis√©e
        # C'est beaucoup plus efficace que d'it√©rer sur toutes les lignes
        point_gdf = gpd.GeoDataFrame([{"geometry": point}], geometry="geometry", crs="EPSG:4326")

        # Essayer une jointure spatiale standard
        try:
            spatial_join = gpd.sjoin(point_gdf, iris_contours, how="left", predicate="within")

            if not spatial_join.empty and not spatial_join.iloc[0].isna().all():
                # R√©cup√©rer les infos de l'IRIS correspondant
                result = {
                    "iris_code": spatial_join.iloc[0].get("code_iris", ""),
                    "iris_name": spatial_join.iloc[0].get("nom_iris", ""),
                    "commune": spatial_join.iloc[0].get("nom_commune", "")
                }
                return result
        except Exception as e:
            st.warning(f"Premier essai de jointure spatiale √©chou√©: {e}")

        # Si √ßa ne fonctionne pas, essayer avec un l√©ger buffer autour du point
        try:
            # Ajouter un petit buffer autour du point (~10m)
            point_buffered = Point(lon, lat).buffer(0.0001)
            point_gdf = gpd.GeoDataFrame([{"geometry": point_buffered}], geometry="geometry", crs="EPSG:4326")

            spatial_join = gpd.sjoin(point_gdf, iris_contours, how="left", predicate="intersects")

            if not spatial_join.empty and not spatial_join.iloc[0].isna().all():
                # R√©cup√©rer les infos de l'IRIS correspondant
                result = {
                    "iris_code": spatial_join.iloc[0].get("code_iris", ""),
                    "iris_name": spatial_join.iloc[0].get("nom_iris", ""),
                    "commune": spatial_join.iloc[0].get("nom_commune", "")
                }
                return result
        except Exception as e:
            st.warning(f"Deuxi√®me essai de jointure spatiale √©chou√©: {e}")

        # Si tout √©choue, rechercher le plus proche manuellement
        min_distance = float('inf')
        closest_iris = None

        for idx, row in iris_contours.iterrows():
            if row.geometry.is_valid:
                distance = row.geometry.distance(point)
                if distance < min_distance:
                    min_distance = distance
                    closest_iris = {
                        "iris_code": row.get("code_iris", ""),
                        "iris_name": row.get("nom_iris", ""),
                        "commune": row.get("nom_commune", "")
                    }

        # Si un IRIS proche a √©t√© trouv√© et qu'il est √† moins de 0.005 degr√© (~500m)
        if closest_iris and min_distance < 0.005:
            st.info(
                f"Point hors des limites IRIS. Utilisation du plus proche √† {min_distance:.5f} degr√©s (environ {min_distance * 111000:.0f}m).")
            return closest_iris

        # Aucun IRIS trouv√©
        st.warning("Aucun IRIS trouv√© pour ces coordonn√©es.")
        return None

    except Exception as e:
        st.error(f"Erreur lors de la recherche du code IRIS: {e}")
        import traceback
        st.error(traceback.format_exc())
        return None


# Fonction pour charger les donn√©es socio-√©conomiques par IRIS
@st.cache_data
def load_socioeconomic_data():
    """
    Charge les donn√©es socio-√©conomiques par IRIS depuis MinIO
    """
    try:
        # Charger les donn√©es depuis MinIO
        df = load_data_from_minio(
            bucket_name="raw-data",
            object_name="base-td-file-iris/20250316/base_td_file_iris.csv",
            file_format="csv",
            sep=";"
        )
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es socio-√©conomiques: {e}")
        # Cr√©er un DataFrame vide en cas d'erreur
        return pd.DataFrame()


# Fonction pour obtenir les donn√©es socio-√©conomiques d'un IRIS
def get_socioeconomic_data_for_iris(iris_code, socioeconomic_data):
    """
    R√©cup√®re les donn√©es socio-√©conomiques pour un code IRIS donn√©
    """
    try:
        # Filtrer les donn√©es pour l'IRIS sp√©cifi√©
        iris_data = socioeconomic_data[socioeconomic_data["IRIS"] == iris_code]

        if not iris_data.empty:
            return {
                "DEC_MED21": iris_data["DEC_MED21"].values[0],
                "DEC_D121": iris_data["DEC_D121"].values[0],
                "DEC_D921": iris_data["DEC_D921"].values[0],
                "DEC_GI21": iris_data["DEC_GI21"].values[0]
            }
        return None
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es socio-√©conomiques: {e}")
        return None


# Titre de l'application
st.title("üè† Pr√©diction du Prix Immobilier")

# Sidebar pour le chargement du mod√®le
with st.sidebar:
    st.title("Configuration")

    if st.button("Charger le mod√®le"):
        with st.spinner("Chargement du mod√®le..."):
            try:
                # Charger le mod√®le scikit-learn
                model_tuple = load_sklearn_model()

                # V√©rifier si le mod√®le a √©t√© charg√© correctement
                if model_tuple[0] is None:
                    st.error("√âchec du chargement du mod√®le. Le mod√®le est None.")
                else:
                    # Stocker le mod√®le, pr√©processeur et le chemin temporaire dans le state de la session
                    st.session_state["model"] = model_tuple[0]  # Mod√®le
                    st.session_state["preprocessor"] = model_tuple[1]  # Pr√©processeur
                    st.session_state["temp_dir"] = model_tuple[2]  # Chemin temporaire

                    # Afficher le type du mod√®le pour confirmation
                    st.success(f"Mod√®le charg√© avec succ√®s! Type: {type(st.session_state['model']).__name__}")
            except Exception as e:
                st.error(f"Erreur lors du chargement du mod√®le: {e}")
                import traceback
                st.error(traceback.format_exc())

# Conteneur principal pour le formulaire
main_container = st.container()

with main_container:
    # Interface en deux colonnes
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("Caract√©ristiques du bien")

        # Formulaire pour les caract√©ristiques du bien
        with st.form(key="property_form"):
            # Informations temporelles

            # Caract√©ristiques du bien
            col_a, col_b = st.columns(2)
            with col_a:
                surface_reelle_bati = st.number_input("Surface habitable (m¬≤)", min_value=10, max_value=500, value=40)
            with col_b:
                nombre_pieces_principales = st.number_input("Nombre de pi√®ces", min_value=1, max_value=15, value=2)

            col_a, col_b = st.columns(2)
            with col_a:
                surface_terrain = st.number_input("Surface terrain (m¬≤)", min_value=0, max_value=10000, value=0)
            with col_b:
                ratio_terrain_bati = surface_terrain / surface_reelle_bati if surface_reelle_bati > 0 else 0
                st.write(f"Ratio terrain/b√¢ti: {ratio_terrain_bati:.2f}")

            # Type de bien
            code_type_local = st.selectbox(
                "Type de bien",
                options=[(1, "Maison"), (2, "Appartement")],
                format_func=lambda x: x[1],
                index=1
            )[0]  # On r√©cup√®re le code

            # Adresse pour g√©olocalisation
            address = st.text_input("Adresse compl√®te", "10 rue Jehan de Bazvalan, 56000 Vannes")

            # Bouton de soumission
            submit_button = st.form_submit_button(label="Estimer le prix")

    # Traitement apr√®s soumission du formulaire
    if submit_button:
        with st.spinner("Estimation en cours..."):
            # V√©rifier si le mod√®le est charg√©
            if "model" not in st.session_state or "preprocessor" not in st.session_state:
                st.error("Veuillez d'abord charger le mod√®le!")
            else:
                # G√©olocalisation de l'adresse
                location_info = get_coordinates_from_address(address)

                if location_info:
                    # Afficher les informations de localisation
                    with col2:
                        st.header("Localisation")
                        st.write(
                            f"**Adresse**: {location_info['street']}, {location_info['postcode']} {location_info['city']}")
                        st.write(f"**Coordonn√©es**: Lat: {location_info['lat']}, Lon: {location_info['lon']}")

                        # Cr√©er une carte pour afficher la position
                        map_data = pd.DataFrame({
                            'lat': [location_info['lat']],
                            'lon': [location_info['lon']]
                        })
                        st.map(map_data)

                    # Charger les contours IRIS
                    with st.spinner("Recherche du code IRIS..."):
                        iris_contours = load_iris_contours()

                        if not iris_contours.empty:
                            # Trouver le code IRIS
                            iris_info = get_iris_code_from_coordinates(
                                location_info['lat'],
                                location_info['lon'],
                                iris_contours
                            )

                            if iris_info:
                                # Afficher les informations IRIS
                                with col2:
                                    st.subheader("Informations de la zone")
                                    st.write(f"**Code IRIS**: {iris_info['iris_code']}")
                                    st.write(f"**Nom IRIS**: {iris_info['iris_name']}")
                                    st.write(f"**Commune**: {iris_info['commune']}")

                                # Charger les donn√©es socio-√©conomiques
                                socioeconomic_data = load_socioeconomic_data()

                                if not socioeconomic_data.empty:
                                    # R√©cup√©rer les donn√©es socio-√©conomiques de cet IRIS
                                    iris_socioeco = get_socioeconomic_data_for_iris(
                                        iris_info['iris_code'],
                                        socioeconomic_data
                                    )

                                    if iris_socioeco:
                                        for key in ['DEC_MED21', 'DEC_D121', 'DEC_D921', 'DEC_GI21']:
                                            if isinstance(iris_socioeco[key], str):
                                                # Remplacer la virgule par un point et convertir en float
                                                try:
                                                    # Afficher la valeur pour le d√©bogage
                                                    print(f"Valeur d'origine pour {key}: {iris_socioeco[key]}")
                                                    iris_socioeco[key] = float(
                                                        str(iris_socioeco[key]).replace(',', '.'))
                                                    print(f"Valeur convertie pour {key}: {iris_socioeco[key]}")
                                                except Exception as e:
                                                    print(f"Erreur lors de la conversion de {key}: {e}")
                                                    # Valeur par d√©faut en cas d'erreur
                                                    iris_socioeco[key] = 0.0
                                        # Afficher les donn√©es socio-√©conomiques
                                        with col2:
                                            st.subheader("Donn√©es socio-√©conomiques")
                                            st.write(f"**Revenu m√©dian**: {iris_socioeco['DEC_MED21']} ‚Ç¨")
                                            st.write(f"**1er d√©cile**: {iris_socioeco['DEC_D121']} ‚Ç¨")
                                            st.write(f"**9√®me d√©cile**: {iris_socioeco['DEC_D921']} ‚Ç¨")
                                            st.write(f"**Indice de Gini**: {iris_socioeco['DEC_GI21']}")

                                        current_date = datetime.now()
                                        current_year = current_date.year
                                        current_month = current_date.month

                                        # Pr√©parer les caract√©ristiques pour la pr√©diction selon le format attendu par le mod√®le
                                        features = {
                                            "annee_mutation": current_year,
                                            "mois_mutation": current_month,
                                            "code_postal": location_info['postcode'],
                                            "surface_reelle_bati": surface_reelle_bati,
                                            "nombre_pieces_principales": nombre_pieces_principales,
                                            "surface_terrain": surface_terrain,
                                            "longitude": location_info['lon'],
                                            "latitude": location_info['lat'],
                                            "code_type_local": code_type_local,
                                            "DEC_MED21": iris_socioeco['DEC_MED21'],
                                            "DEC_D121": iris_socioeco['DEC_D121'],
                                            "DEC_D921": iris_socioeco['DEC_D921'],
                                            "DEC_GI21": iris_socioeco['DEC_GI21'],
                                            "ratio_terrain_bati": ratio_terrain_bati,
                                        }

                                        # Faire la pr√©diction avec le mod√®le scikit-learn
                                        try:
                                            predicted_price = predict_price_sklearn(
                                                st.session_state["model"],
                                                st.session_state["preprocessor"],
                                                features
                                            )

                                            # Afficher le r√©sultat
                                            st.header("R√©sultat de l'estimation")
                                            st.success(f"Prix estim√©: **{predicted_price:,.0f} ‚Ç¨**")

                                            # Calculer le prix au m¬≤
                                            price_per_sqm = predicted_price / surface_reelle_bati
                                            st.info(f"Prix au m¬≤: **{price_per_sqm:,.0f} ‚Ç¨/m¬≤**")

                                        except Exception as e:
                                            st.error(f"Erreur lors de la pr√©diction: {e}")
                                            st.error(f"D√©tails: {str(e)}")
                                    else:
                                        st.warning("Aucune donn√©e socio-√©conomique trouv√©e pour cet IRIS.")
                                else:
                                    st.warning("Impossible de charger les donn√©es socio-√©conomiques.")
                            else:
                                st.warning("Aucun code IRIS trouv√© pour cette localisation.")
                        else:
                            st.warning("Impossible de charger les contours IRIS.")
                else:
                    st.error("Impossible de g√©olocaliser cette adresse.")

# Ajouter des informations en bas de page
st.markdown("---")
st.caption("Application de pr√©diction de prix immobilier bas√©e sur un mod√®le scikit-learn")